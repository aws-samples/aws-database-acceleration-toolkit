// Variables
// ----------------------
github_source   = "main"
github_org      = "aws-samples"
github_repo     = "aws-database-acceleration-toolkit"
credentials_id  = "githubcred"

// Function(s)
// ----------------------
def handleCheckout = {
  
  def regGithubSource    = ~/^v[\d|.]+/
  is_tag = regGithubSource.matcher(github_source).matches()
  if (is_tag == true) {
    gitref = 'refs/tags/'
  } else {
    gitref = 'refs/heads/'
  }
  
  checkout([ 
    $class: 'GitSCM',
    branches: [[name: gitref + github_source]], 
    doGenerateSubmoduleConfigurations: false, 
    extensions: [
      [
        $class: 'CloneOption',
        noTags: false,
        shallow: false,
        depth: 0,
        reference: ''
      ],
      [ 
        $class: 'SubmoduleOption', 
        depth: 1, 
        disableSubmodules: false, 
        parentCredentials: true, 
        recursiveSubmodules: true, 
        reference: '', 
        shallow: true, 
        trackingSubmodules: false
      ], 
      [$class: 'GitLFSPull']
    ], 
    submoduleCfg: [], 
    userRemoteConfigs: [[ credentialsId: credentials_id, url: 'https://github.com/' + github_org + '/' + github_repo + '.git']]
  ]);
}


pipeline {

    agent any

      parameters {
        string(defaultValue: "us-east-2", description: 'Region', name: 'REGION') 
        string(defaultValue: "dev", description: 'Environment', name: 'ENVIRONMENT')   
        string(defaultValue: "", description: 'VPC ID', name: 'VPC')  
        string(defaultValue: "", description: 'CLUSETER NAME', name: 'CLUSETERNAME')  
        
        booleanParam(defaultValue: false, description: 'Delete the stack?', name: 'Destroy')   
    }


    environment {
        REGION="${params.REGION}"
        ENVIRONMENT = "${params.ENVIRONMENT}".trim()
        VPC = "${params.VPC}"
        CLUSTERNAME = "${params.CLUSETERNAME}"
        
        TF_WORKSPACE_Jenkins = "${env.JOB_BASE_NAME}_${env.BUILD_NUMBER}"
      
    }
    stages {
stage('checkout') {
  
      steps {
        script {
         
          handleCheckout()
        }
      }
}

        stage('Terraform plan') {

            steps {
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'jenkinsaws',
  usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']
    ]) 
{
                 sh '''
                   cd ./examples/db-proxy-to-existing-postgres-cluster
                    
                   terraform init
	               terraform workspace select ${TF_WORKSPACE_Jenkins} || terraform workspace new ${TF_WORKSPACE_Jenkins} 
                   terraform init && terraform plan -var-file=terraform.tfvars -var="environment=${ENVIRONMENT}" -var="region=${REGION}" -var="vpc_id=${VPC}" -var="clusterName=${CLUSETERNAME}" -var="aws_access_key=${AWS_ACCESS_KEY_ID}" -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}"
        
                '''       
            }
        }
        }

         stage('Terraform apply') {
when {
         expression { params.Destroy != true }
     }
            steps {
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'jenkinsaws',
  usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']
    ]) 
{
     sh '''
                   cd ./examples/db-proxy-to-existing-postgres-cluster
                    
                   terraform init
	                 terraform workspace select ${TF_WORKSPACE_Jenkins}  || terraform workspace new ${TF_WORKSPACE_Jenkins} 
                   terraform init && terraform apply -auto-approve -var-file=terraform.tfvars -var="environment=${ENVIRONMENT}" -var="region=${REGION}" -var="vpc_id=${VPC}" -var="clusterName=${CLUSETERNAME}" -var="aws_access_key=${AWS_ACCESS_KEY_ID}" -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}"
        
                '''   
            }

}

        }
             stage('Terraform destroy') {
when {
         expression { params.Destroy != false }
     }
            steps {
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'jenkinsaws',
  usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']
    ]) 
{
     sh '''
                   cd ./examples/db-proxy-to-existing-postgres-cluster
                    
                   terraform init
	                 terraform workspace select ${TF_WORKSPACE_Jenkins}  || terraform workspace new ${TF_WORKSPACE_Jenkins} 
                   terraform init && terraform destroy -auto-approve -var-file=terraform.tfvars -var="environment=${ENVIRONMENT}" -var="region=${REGION}" -var="vpc_id=${VPC}" -var="clusterName=${CLUSETERNAME}" -var="aws_access_key=${AWS_ACCESS_KEY_ID}" -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}"
        
                '''   
            }

}

        }

    }

}

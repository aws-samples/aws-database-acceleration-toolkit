// Variables
// ----------------------
github_source   = "main"
github_org      = "aws-samples"
github_repo     = "aws-database-acceleration-toolkit"
credentials_id  = "githubcred"

// Function(s)
// ----------------------
def handleCheckout = {
  
  def regGithubSource    = ~/^v[\d|.]+/
  is_tag = regGithubSource.matcher(github_source).matches()
  if (is_tag == true) {
    gitref = 'refs/tags/'
  } else {
    gitref = 'refs/heads/'
  }
  
  checkout([ 
    $class: 'GitSCM',
    branches: [[name: gitref + github_source]], 
    doGenerateSubmoduleConfigurations: false, 
    extensions: [
      [
        $class: 'CloneOption',
        noTags: false,
        shallow: false,
        depth: 0,
        reference: ''
      ],
      [ 
        $class: 'SubmoduleOption', 
        depth: 1, 
        disableSubmodules: false, 
        parentCredentials: true, 
        recursiveSubmodules: true, 
        reference: '', 
        shallow: true, 
        trackingSubmodules: false
      ], 
      [$class: 'GitLFSPull']
    ], 
    submoduleCfg: [], 
    userRemoteConfigs: [[ credentialsId: credentials_id, url: 'https://github.com/' + github_org + '/' + github_repo + '.git']]
  ]);
}

pipeline {

    agent any

      parameters {
        string(defaultValue: "us-east-2", description: 'Region', name: 'REGION') 
        string(defaultValue: "dev", description: 'Environment', name: 'ENVIRONMENT')   
        string(defaultValue: "", description: 'VPC ID', name: 'VPC')
        
    }

    environment {
        REGION="${params.REGION}"
        ENVIRONMENT = "${params.ENVIRONMENT}"
        VPC = "${params.VPC}"
    }
    stages {
 stage("parameterizing") {
            steps {
                script {
                    if ("${params.Invoke_Parameters}" == "Yes") {
                        currentBuild.result = 'ABORTED'
                        error('DRY RUN COMPLETED. JOB PARAMETERIZED.')
                    }
                }
            }
        }
stage('checkout') {
  
      steps {
        script {
          cleanWs()
          handleCheckout()
        }
      }
}
        stage('Terraform init') {
            steps{
                 sh '''
                 pwd
                   cd ./examples/aurora-postgres-cluster-existing-vpc
                   terraform init 
                '''
            }
        }
        stage('Terraform plan') {

            steps {
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'jenkinsaws',
  usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']
    ]) 
{
                 sh '''
                   cd ./examples/aurora-postgres-cluster-existing-vpc
                   terraform plan -var-file=terraform.tfvars -var="environment=${ENVIRONMENT}" -var="region=${REGION}" -var="vpc_id=${VPC}" -state="{$JOB_NAME}_{$BUILD_NUMBER}.tfstate" -var="aws_access_key=${AWS_ACCESS_KEY_ID}" -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}"
                  
                '''
}

}

        }

         stage('Terraform apply') {

            steps {
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'jenkinsaws',
  usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']
    ]) 
{
                 sh '''
                   cd ./examples/aurora-postgres-cluster-existing-vpc
                   terraform apply -auto-approve -var-file=terraform.tfvars -state="{env.JOB_BASE_NAME}_{env.$BUILD_NUMBER}.tfstate" -var="environment=${ENVIRONMENT}" -var="region=${REGION}" -var="vpc_id=${VPC}" -var="aws_access_key=${AWS_ACCESS_KEY_ID}" -var="aws_secret_key=${AWS_SECRET_ACCESS_KEY}"
                  
                '''
}

}

        }

    }

}
